/*
 * Copyright (c) 2022 The ZMK Contributors'
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define QWR 1
#define MSE 2
#define LWR 3
#define RSE 4
#define FNC 5

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    macros {
        scroll: scroll {
            label = "ZM_scroll";
            compatible = "zmk,behavior-macro";
            wait-ms = <1>;
            tap-ms = <4>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp KP_NUMLOCK>
                , <&macro_tap &kp KP_NUMLOCK>
                ;
        };
    };

    combos {
        compatible = "zmk, combos";
        combo_lmb {
            timeout-ms = <50>;
            key-positions = <18, 19>;
            bindings = <&mkp LCLK>
        }
    }

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_PREV>;
        };
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>;
        };
        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_to";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp LS(C_VOL_UP) LS(C_VOL_DN)>;
            bindings = <
                &td0          &td1
                &kp ESC       &kp Q         &mt LC(W) W  &mt LC(F) F   &kp P            &kp B         &kp J        &mt LC(L) L  &kp U        &kp Y      &kp SQT        &mt LC(BSPC) BSPC  
                &kp TAB       &mt LC(A) A   &mt LC(R) R  &mt LC(S) S   &mt LC(T) T      &kp G         &kp M        &mt LC(N) N  &kp E        &kp I      &kp O          &kp SEMI
                &kp LSHFT     &mt LC(Z) Z   &mt LC(X) X  &mt LC(C) C   &kp D            &mt LC(V) V   &kp K        &kp H        &kp COMMA    &kp DOT    &kp FSLH       &kp ENTER
                &kp LCTRL     &kp LALT      &kp LGUI     &mo FNC       &mo_to LWR MSE           &kp SPACE          &mo RSE      &kp LEFT     &kp DOWN   &kp UP         &kp RIGHT
            >;
        };

        qwerty_layer {
            bindings = <
                &trans     &trans
                &trans     &kp Q       &kp W       &kp E       &kp R       &kp T       &kp Y       &kp U       &kp I       &kp O     &kp P       &trans  
                &trans     &kp A       &kp S       &kp D       &kp F       &kp G       &kp H       &kp J       &kp K       &kp L     &trans      &trans
                &trans     &kp Z       &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &trans      &trans    &trans      &trans
                &trans     &trans      &trans      &trans      &trans            &trans            &trans      &trans      &trans      &trans    &trans
            >;
        };

        mouse_layer {
            bindings = <
                &trans      &trans
                &to DEF     &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans        &trans
                &trans      &scroll     &mkp RCLK   &mkp MCLK   &mkp LCLK   &trans      &trans      &trans      &trans      &trans      &trans        &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans        &trans
                &trans      &trans      &trans      &trans      &trans            &trans            &trans      &trans      &trans      &trans        &trans                    
            >;
        };

        lower_layer {
            sensor-bindings = <&inc_dec_kp PLUS MINUS>;
            bindings = <
                &trans      &trans
                &kp TILDE   &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT   &kp CARET   &kp AMPS    &kp STAR    &kp LPAR    &kp RPAR      &kp DEL
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT     &kp AT
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &kp LBRC    &kp RBRC    &trans        &trans
                &trans      &trans      &trans      &trans      &trans            &trans            &trans      &trans      &kp QMARK   &trans        &trans                    
            >;
        };

        raise_layer {
            bindings = <
                &trans     &trans
                &kp GRAVE    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5       &kp N6       &kp N7       &kp N8       &kp N9       &kp N0     &kp BSPC
                &trans       &kp UNDER    &kp KP_MINUS &kp EQUAL &kp KP_PLUS  &trans       &trans       &trans       &kp MINUS    &kp EQUAL    &trans     &kp NON_US_BSLH
                &trans       &kp PIPE2    &kp AMPS     &trans       &trans       &trans       &trans       &trans       &kp LBKT     &kp RBKT     &trans     &trans
                &trans       &trans       &trans       &trans       &trans             &trans              &trans       &trans       &trans       &trans     &trans
            >;            
        };

        function_layer {
            bindings = <
                &trans     &trans
                &reset          &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &tog QWR
                &bootloader     &trans          &trans          &trans          &trans          &trans          &trans      &trans      &kp MINUS   &kp F11     &kp F12     &trans
                &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &trans      &trans      &trans      &trans      &trans      &trans
                &out OUT_BLE    &out OUT_USB    &out OUT_TOG    &trans          &trans                     &trans           &trans      &trans      &trans      &trans      &trans
            >;         
        };
    };
};
